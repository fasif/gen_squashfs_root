#!/bin/sh

export PATH=.:/:/usr/sbin:/usr/bin:/sbin/:/bin

fatal() {
	echo "Fatal error occured - $1"
	setsid sh -c 'exec sh < /dev/tty1 > /dev/tty1 2>&1'
}

transfer_initramfs() {
	if [ ! -r /lib/initramfs_escaped ]; then
		echo "switch root from initramfs to ramfs"
		SWITCH=/m #one letter directory
		mkdir $SWITCH
		mount -t tmpfs -o size="100%" tmpfs $SWITCH
		cp -a /??* $SWITCH 2>/dev/null #only copy two-and-more-letter directories
		cd $SWITCH
		echo "This file indicates that we successfully escaped initramfs" > $SWITCH/lib/initramfs_escaped
		exec switch_root -c /dev/console . $0
	fi
}

init_proc_sysfs() {
	echo "init_proc_sysfs"
	mkdir -p /proc /sys /etc $MEMORY
	mount -n -t proc proc /proc
	echo "0" >/proc/sys/kernel/printk
	mount -n -t sysfs sysfs /sys
	mount -n -o remount,rw rootfs /
	ln -sf /proc/mounts /etc/mtab
}

refresh_devs() {
	echo "refresh_devs"
	if [ -r /proc/sys/kernel/hotplug ]; then
		echo /sbin/mdev >/proc/sys/kernel/hotplug
	fi
	mdev -s
}

init_devs() {
	echo "init_devs"

	modprobe -q loop 
	modprobe -q squashfs 
	modprobe -q overlay 

	refresh_devs
}

#customize data load 
load_data() {
	local arch=`apk --print-arch`
	mkdir -p $1 #data dir
	cryptsetup --type=plain --cipher=aes-xts-plain64 --key-file=/key/eap_hdd_key.bin open /dev/sda27 ps4hdd
	mount -t ufs -o ufstype=ufs2 /dev/mapper/ps4hdd $1
	ls $1/system/boot
	mkdir -p $2/rootfs #bundles
	mount "$1"/system/boot/rootfs-$arch.squashfs "$2"/rootfs
}

init_union() {
	echo "init_union"
	echo "Setting up union using overlayfs"
	mkdir -p $1 #chanes directory
	mkdir -p $2 #working dir
	mkdir -p $3 #union directory where to mount the union
	mount -t overlay overlay -o lowerdir="$BUNDLES"/rootfs,upperdir="$1",workdir="$2" "$3"
}

change_root() {
	echo "change_root" "$*"
	umount /proc
	umount /sys

	cd "$1" #where to change root

	#make sure important device files and directories are in union
	mkdir -p boot dev proc sys tmp media mnt run
	chmod 1777 tmp
	if [ ! -e dev/console ]; then mknod dev/console c 5 1; fi
	if [ ! -e dev/tty ]; then mknod dev/tty c 5 0; fi
	if [ ! -e dev/tty0 ]; then mknod dev/tty0 c 4 0; fi
	if [ ! -e dev/tty1 ]; then mknod dev/tty1 c 4 1; fi
	if [ ! -e dev/null ]; then mknod dev/null c 1 3; fi

	#find chroot and init
	if [ -x bin/chroot -o -L bin/chroot ]; then CHROOT=bin/chroot; fi
	if [ -x sbin/chroot -o -L sbin/chroot ]; then CHROOT=bin/chroot; fi
	if [ -x usr/bin/chroot -o -L usr/bin/chroot ]; then CHROOT=usr/bin/chroot; fi
	if [ -x usr/sbin/chroot -o -L usr/sbin/chroot ]; then CHROOT=usr/sbin/chroot; fi
	if [ "$CHROOT" = "" ]; then fatal "Can't find executable chroot command"; fi

	if [ -x bin/init -o -L bin/init ]; then INIT=bin/init; fi
	if [ -x sbin/init -o -L sbin/init ]; then INIT=sbin/init; fi
	if [ "$INIT" = "" ]; then fatal "Can't find executable init command"; fi

	mkdir -p run 
	mount -t tmpfs tmpfs run
	mkdir -p run/initramfs
	pivot_root . run/initramfs
	exec $CHROOT . $INIT < /dev/console >/dev/console 2>&1
}

/bin/busybox mkdir -p /usr/bin /usr/sbin /proc /sys /dev /tmp
/bin/busybox --install -s

transfer_initramfs

MEMORY=/memory
CHANGES=$MEMORY/changes
UNION=$MEMORY/union
DATA=$MEMORY/data
BUNDLES=$MEMORY/bundles
WORKDIR=$MEMORY/workdir

init_proc_sysfs
init_devs
load_data "$DATA" "$BUNDLES"
init_union "$CHANGES" "$WORKDIR" "$UNION"

#cp radeon firmware
mkdir -p "$UNION"/lib/firmware
cp -r /lib/firmware/* "$UNION"/lib/firmware/
#cp keyfile to root dir
cp /key/eap_hdd_key.bin "$UNION"/root/

change_root "$UNION"
